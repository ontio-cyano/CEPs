<pre>
  CEP: 1
  Title: dAPI for Mobile dApps and communication protocol for dAPI providers
  Author: Josh Chow, Min Xiao, Ning Hu, Lingxiao Su, Dashuang Wang .
  Type: Standard
  Status: POC
  Created: 06/12/2018
</pre>

==Abstract==
The CEP-1 Proposal is a mobile dAPI standard interface that supports dApp wake-up wallet, login by scanning QR code, and open dApp in wallet. This protocol can be extended to support more actions.

There are three mobile dApp scenarios:

=== Scenario 1: Provider scans a QR code  ===

Web generates a QR code and then provider scans the QR code to login and invoke a smart contract request.

=== Scenario 2:  dApp wake-up provider ===

The dApp wake-up provider requests for login authorization and invokes a smart contract request.

=== Scenario 3: Provider opens DApp ===

H5 dApp is embedded in provider. Opening H5 dApp for login authorization and H5 dApp invokes a smart contract request.



==Motivation==
Currently, [[https://github.com/ontio/ontology-dapi | dAPI for Chrome]] is only available as a desktop Chrome extension. It is not available for mobile, so a large number of mobile dApps cannot use a dAPI.




==Specifications==

The main dAPI mobile interface:

* getAccount or getIdentity: dApp getAccount and getIdentity from the provider.
* Login: A dApp sends a login message, and the provider responses a signed message.
* Invoke a smart contract: A dApp sends an invoke request. The provider signs and sends it to the MainNet.
* Transfer ONT/ONG: the same to invoke a smart contract.
* Ontid: Registration or update attribute.



=== Flow of the Protocol===


The provider registers the intercept protocol (URL Scheme, appLink) in mobile for a H5 dApp that can wake up the wallet app.

A dApp calls this protocol and sends data to the provider. The request format of data is structured as:

ontprovider://ont.io?param=Base64.encode(Uri.encode({the json data}.toString()))

====  Get Account or Identity====

In Scenario 3: A provider opens a dApp. If the dApp does not need a user login:

[[Image:../images/get-account-or-identity.png|get-account-or-identity]]

====  Login====


[[Image:../images/login.png|login]]

ONT ID login if ONT ID is not registered:

[[Image:../images/login-use-ontid.png|login]]

====  Invoke a Smart Contract ====

Provider can add owner signature to distinguish the sender.

[[Image:../images/invoke.png|invoke]]




=== Protocol data format ===

Request message
<pre>
{
    action	string   // action
    version     string   // version
    id       string   // id
    params      object   // action parameter
}
</pre>
Response message
<pre>
{
    action    string   // action
    version   string   // version
    id       string   // id
    error     int      // error code
    desc      string   // desc of error code
    result    string   // result
}
</pre>

==== Get Account or Identity====

Get Account or Identity from Provider

<pre>
{
	"action": "getAccount",
	"version": "v1.0.0",
	"id": "10ba038e-48da-487b-96e8-8d3b99b6d18a",
	"params": {
		"dappName": "dapp Name",
		"dappIcon": "dapp Icon"
	}
}

</pre>

or

<pre>
{
	"action": "getIdentity",
	"version": "v1.0.0",
	"id": "10ba038e-48da-487b-96e8-8d3b99b6d18a",
	"params": {
		"dappName": "dapp Name",
		"dappIcon": "dapp Icon"
	}
}

</pre>


Response:

<pre>
{
	"action": "getAccount",
	"version": "v1.0.0",
	"id": "10ba038e-48da-487b-96e8-8d3b99b6d18a",
	"error": 0,
	"desc": "SUCCESS",
	"result": "AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ"
}
</pre>

====Login====

Login params

<pre>
{
    type        string  // ontid or account
    dappName    string   // dApp name
    dappIcon    string   // dApp icon
    message     string   // message for signature
    expire      long    // QRcode expire time
    callback	string   // callback url of dapp server
}
</pre>

Request example:

<pre>
{
	"action": "login",
	"id": "10ba038e-48da-487b-96e8-8d3b99b6d18a",
	"version": "v1.0.0",
	"params": {
		"type": "ontid or account",
		"dappName": "dapp Name",
		"dappIcon": "dapp Icon",
		"message": "helloworld",
		"expire": 1546415363, // QR Code expire time
		"callback": "http://127.0.0.1:80/login/callback"
	}
}

</pre>

Post to callback:

<pre>
{
	"action": "login",
	"version": "v1.0.0",
	"id": "10ba038e-48da-487b-96e8-8d3b99b6d18a",
	"params": {
		"type": "ontid or account",
		"user": "did:ont:AUEKhXNsoAT27HJwwqFGbpRy8QLHUMBMPz",
		"message": "helloworld",
		"publickey": "0205c8fff4b1d21f4b2ec3b48cf88004e38402933d7e914b2a0eda0de15e73ba61",
		"signature": "01abd7ea9d79c857cd838cabbbaad3efb44a6fc4f5a5ef52ea8461d6c055b8a7cf324d1a58962988709705cefe40df5b26e88af3ca387ec5036ec7f5e6640a1754"
	}
}
</pre>

Response from callback:

<pre>
{
	"action": "login",
	"version": "v1.0.0",
	"id": "10ba038e-48da-487b-96e8-8d3b99b6d18a",
	"error": 0,
	"desc": "SUCCESS",
	"result": true
}
</pre>

====Signature Message====

The same to login. Signature message params:

<pre>
{
    type        string  // ontid or account
    message     string   // message for signature
    expire      long    // QRcode expire time
    callback	string   // callback url of dapp server
}
</pre>

<pre>
{
	"action": "signMessage",
	"version": "v1.0.0",
	"id": "10ba038e-48da-487b-96e8-8d3b99b6d18a",
	"params": {
		"type": "ontid or account",
		"message": "helloworld",
		"expire": 1546415363, // QR Code expire time
		"callback": "http://127.0.0.1:80/login/callback"
	}
}

</pre>

====Invoke a Smart Contract====

Invoke smart contract params
<pre>
{
    login         bool    // optional , logined or not
    message      string   // message show in Provider, optional
    invokeConfig  long    // invoke config parameter
    callback     string   // send tx hash to dApp server
}
</pre>

If the user has logged in, only method and parameters will be required and the signature will no longer be required. Provider helps make a transaction:
<pre>
{
	"action": "invoke",  // other action is invokeRead, invokePasswordFree
	"version": "v1.0.0",
	"id": "10ba038e-48da-487b-96e8-8d3b99b6d18a",
	"params": {
		"login": true,
		"qrcodeUrl": "http://101.132.193.149:4027/qrcode/AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ",
		"message": "will pay 1 ONT in this transaction",
		"callback": "http://101.132.193.149:4027/invoke/callback",
		"invokeConfig": {
			"contractHash": "16edbe366d1337eb510c2ff61099424c94aeef02",
			"functions": [{
				"operation": "method name",
				"args": [{
					"name": "arg0-list",
					"value": [true, 100, "Long:100000000000", "Address:AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ", "ByteArray:aabb", "String:hello", [true, 100], {
						"key": 6
					}]
				}, {
					"name": "arg1-map",
					"value": {
						"key": "String:hello",
						"key1": "ByteArray:aabb",
						"key2": "Long:100000000000",
						"key3": true,
						"key4": 100,
						"key5": [100],
						"key6": {
							"key": 6
						}
					}
				}, {
					"name": "arg2-str",
					"value": "String:test"
				}]
			}],
			"payer": "AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ",
			"gasLimit": 20000,
			"gasPrice": 500
		}
	}
}
</pre>

or

If user did not login:

<pre>
{
	"action": "invoke",
	"version": "v1.0.0",
	"id": "10ba038e-48da-487b-96e8-8d3b99b6d18a",
	"params": {
		"login": false,
		"callback": "http://127.0.0.1:80/login/callback"
	}
}

</pre>
Then the provider posts the address to the dApp backend and the dApp backend returns signedTx.

Response:

<pre>
{
	"action": "invoke",
	"id": "10ba038e-48da-487b-96e8-8d3b99b6d18a",
	"version": "v1.0.0",
	"error": 0,
	"desc": "SUCCESS",
	"result": "tx hash"   // return hexstring if is preExec
}

</pre>

====Transfer ONT/ONG====

<pre>
{
	"action": "invoke",
	"version": "v1.0.0",
	"id": "10ba038e-48da-487b-96e8-8d3b99b6d18a",
	"params": {
		"invokeConfig": {
			"contractHash": "0200000000000000000000000000000000000000",
			"functions": [{
				"operation": "transfer",
				"args": [{
						"name": "arg0-from",
						"value": "Address:AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ"
					},
					{
						"name": "arg1-to",
						"value": "Address:AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ"
					},
					{
						"name": "arg2-amount",
						"value": "Long:1000000000"
					}
				]
			}],
			"payer": "AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ",
			"gasLimit": 20000,
			"gasPrice": 500,
			"signature": [{
				"m": 1,
				"signers": ["AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ"]
			}]
		}
	}
}

</pre>

Response:

<pre>
{
	"action": "invoke",
	"version": "v1.0.0",
	"id": "10ba038e-48da-487b-96e8-8d3b99b6d18a",
	"error": 0,
	"desc": "SUCCESS",
	"result": "txhash"
}
</pre>


====Ontid registry====

<pre>
{
	"action": "invoke",
	"version": "v1.0.0",
	"id": "10ba038e-48da-487b-96e8-8d3b99b6d18a",
	"params": {
		"invokeConfig": {
			"contractHash": "0300000000000000000000000000000000000000",
			"functions": [{
				"operation": "regIDWithPublicKey",
				"args": [{
						"name": "arg0-ontid",
						"value": "String:did:ont:AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ"
					},
					{
						"name": "arg1-publickey",
						"value": "ByteArray:03f631f975560afc7bf47902064838826ec67794ddcdbcc6f0a9c7b91fc8502583"
					}
				]
			}],
			"payer": "AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ",
			"gasLimit": 20000,
			"gasPrice": 500,
			"signature": [{
				"m": 1,
				"signers": ["AUr5QUfeBADq6BMY6Tp5yuMsUNGpsD7nLZ"]
			}]
		}
	}
}

</pre>

Response:

<pre>
{
	"action": "invoke",
	"id": "10ba038e-48da-487b-96e8-8d3b99b6d18a",
	"version": "v1.0.0",
	"error": 0,
	"desc": "SUCCESS",
	"result": {
	}
}
</pre>

=== dApp front-end ===

=====Scenario 2: Wake-up provider for dApp login =====

1. Wake-up Provider: Send a message for user signature



2. Provider sends a message, public key, and signature to callback url.



=====Scenario 2: Wakeup provider for invoke a smart contract=====

1. Wakeup provider: Send dApp owner signed transaction



Then provider posts the address to dApp back-end and dApp back-end returns a signedTx.



=== dApp back-end ===

=====Scenario 1 and 2: Login API =====

Receive the signed message, verify message, and send verify result from the front-end.

=====  Transaction and signature=====

* If the user has logged in, make and sign the transaction for the front-end.

* If user has not logged in, the dApp back-end needs to receive an address a provider posts, and respond a signedTx to the provider.

===== Synchronize transction events =====

Synchronize smart contract transction events


=== Provider ===

Provider supports receiving wake-up from dApps and scanning QR codes from the dApp website.


====Scenario 1: Scan QR code of login message====

1. Scan message

2. Verify dApp owner signature

3. User add signature in Provider

4. Provider sends message, public key and signature to callback url.



====Scenario 1: Scan transaction QrCode====

1. Scan transaction

2. Verify dApp owner signature

3. Add user signature

4. Send to blockchain






====Scenario 3: H5 dApp login after being opened in provider====

1. H5 dApp: Dend message for user signature



2. Provider sends message, public key, and signature to H5 dApp.



====Scenario 3: H5 dApp invokes a smart contract====

The message is the same to the one that scans transaction QR code.


===Error code===

response example:
<pre>
{
	"action": "login",
	"error": 0,
	"desc": "SUCCESS",
	"result": true
}

</pre>
{| border="0" style="border-collapse:collapse"
| Error Code
|  Description
|-
| 0
| Success
|-
| 80001
| Params error
|-
| 80002
| Method error
|-
| 80003
| Internal error
|}


==Implementation==
Example implementations are available:

===Login code example===
<pre>

// signature message

String prikey = "0fdbd5d046997da9959b1931c727c96d83dff19e8ec0244952c1e72d1cdb5bf4";
com.github.ontio.account.Account acct0 = new com.github.ontio.account.Account(Helper.hexToBytes(prikey), ontSdk.defaultSignScheme);
String message = "helloworld";
byte[] sign = acct0.generateSignature(message.getBytes(), SignatureScheme.SHA256WITHECDSA,null);
String signature = Helper.toHexString(sign);
System.out.println(signature);
String publicKey = Helper.toHexString(acct0.serializePublicKey());
System.out.println(publicKey);


// verify message signature
com.github.ontio.account.Account acct1 = new com.github.ontio.account.Account(false, Helper.hexToBytes(publicKey));
boolean b = acct1.verifySignature(message.getBytes(),Helper.hexToBytes(signature));
System.out.println(b);
String address = Address.addressFromPubKey(publicKey).toBase58();
System.out.println(acct0.getAddressU160().toBase58());

</pre>


Callback  test: POST   http://101.132.193.149:4027/blockchain/v1/common/test-onto-login
<pre>
{
	"action": "login",
	"params": {
		"type": "account",
		"user": "AazEvfQPcQ2GEFFPLF1ZLwQ7K5jDn81hve",
		"message": "1122334",
		"publickey": "035384561673e76c7e3003e705e4aa7aee67714c8b68d62dd1fb3221f48c5d3da0",
		"signature": "01ed0ee7d21dd1020eaae497e0ef9bc18174234e2917e78ec3fae056fd6e2ab166d87235eac2b8ec1062fd4b6f7d9b2a8c5ceb635483959182259a20bf99e5cad6"
	}
}
</pre>

Response:

<pre>
{
    "action": "login",
    "error": 0,
    "desc": "SUCCESS",
    "result": true,
    "version": "v1.0.0"
}
</pre>

===Integration Document===

Android: [[https://github.com/ontio-cyano/cyano-android]]

iOS:  [[https://github.com/ontio-cyano/cyano-ios]]

Integration document: [[https://github.com/ontio-cyano/integration-docs]]

===Scenario Example===


==== Scenario 1 and 2: Split login and invoke smart contract ====

[[Image:../images/split-login-invoke.png|split-login-invoke]]

==== Scenario 1 and 2: Invoke smart contract with login ====

[[Image:../images/invoke-with-login.png|invoke-with-login]]

==== Scenario 3 ====

[[Image:../images/scenario3.png|scenario3]]
